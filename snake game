import pygame
import random
import numpy as np
pygame.init()


white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
blue = (0,0,255)
x1_change = 0       
y1_change = 0

clock = pygame.time.Clock()
snakelst = []


class game:
    def __init__(self):
        dis_width = 300
        dis_height = 200
        dis=pygame.display.set_mode((dis_width,dis_height))
        pygame.display.update()
        pygame.display.set_caption('Snake game')
        self.board = dis
        snakelst = []
        self.isfood = False
        self.food = None
        self.cp = (0,0)
        self.x1_change = 0
        self.y1_change = 0
        self.x1 = random.randint(0,self.board.get_width() / 10 - 1) * 10
        self.y1 = random.randint(0,self.board.get_height() / 10 - 1) * 10
        
            
        self.played = False
        self.snakelst = snakelst
        x = random.randint(0,dis_width / 10 - 1) * 10
        y = random.randint(0,dis_height / 10 - 1) * 10
        self.addsnake((x,y), blue)
        self.game_over = False
        self.cp = (0,0)
        while not self.game_over:
            self.play() 
    def moveright(self):
        print('right')

    def addsnake(self,p, color):
        s = snake(p, color)
        self.snakelst.append(s)

    def createfood(self):
        x1f = random.randint(0,self.board.get_width() / 10 - 1) * 10
        y1f = random.randint(0,self.board.get_height() / 10 - 1) * 10
        food = (x1f,y1f)
        while self.board.get_at(food) != white:
            x1f = random.randint(0,self.board.get_width() / 10 - 1) * 10
            y1f = random.randint(0,self.board.get_height() / 10 - 1) * 10
            food = (x1f,y1f)
        return food

    def drawsnake(self):
        for i in self.snakelst:
            pygame.draw.rect(self.board, i.color, [i.p[0],i.p[1], 10, 10])

    def movesnake(self):
        self.x1 += self.cp[0]
        self.y1 += self.cp[1]
        p = (self.x1, self.y1)
        self.board.fill(white)
        if self.food == None:
            self.food = self.createfood()
            self.isfood = True
        pygame.draw.rect(self.board, red, [self.food[0],self.food[1], 10, 10])
        if p == self.food:
            self.food = None
            plast = self.snakelst[-1].p
            for i in range(len(self.snakelst)):
                if i == 0:
                    plast = self.snakelst[i].p
                    self.snakelst[i].p = p
                else:
                    currentp = self.snakelst[i].p
                    self.snakelst[i].p = plast
                    plast = currentp
            self.addsnake(plast, black)
        else:
            for i in range(len(self.snakelst)):
                if i == 0:
                    plast = self.snakelst[i].p
                    self.snakelst[i].p = p
                else:
                    currentp = self.snakelst[i].p
                    self.snakelst[i].p = plast
                    plast = currentp



    def play(self):
        self.played = False
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                self.game_over=True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    print('LEFT')
                    if self.cp[0] == 0:
                        self.x1_change = -10
                        self.y1_change = 0
                        self.cp = (self.x1_change,self.y1_change)
                        self.movesnake()
                        self.drawsnake()
                        self.played = True
                        for i in range(1,len(self.snakelst)):
                            if self.snakelst[0].p == self.snakelst[i].p:
                                self.game_over = True
                        if self.x1 >= self.board.get_width() or self.x1 < 0 or self.y1 >= self.board.get_height() or self.y1 < 0:
                            self.game_over = True
                elif event.key == pygame.K_RIGHT:
                    print('RIGHT')
                    if self.cp[0] == 0:
                        self.x1_change = 10
                        self.y1_change = 0
                        self.cp = (self.x1_change,self.y1_change)
                        self.movesnake()
                        self.drawsnake()
                        self.played = True
                        for i in range(1,len(self.snakelst)):
                            if self.snakelst[0].p == self.snakelst[i].p:
                                self.game_over = True
                        if self.x1 >= self.board.get_width() or self.x1 < 0 or self.y1 >= self.board.get_height() or self.y1 < 0:
                            self.game_over = True
                elif event.key == pygame.K_UP:
                    print('UP')
                    if self.cp[1] == 0:
                        self.x1_change = 0
                        self.y1_change = -10
                        self.cp = (self.x1_change,self.y1_change)
                        self.movesnake()
                        self.drawsnake()
                        self.played = True
                        for i in range(1,len(self.snakelst)):
                            if self.snakelst[0].p == self.snakelst[i].p:
                                self.game_over = True
                        if self.x1 >= self.board.get_width() or self.x1 < 0 or self.y1 >= self.board.get_height() or self.y1 < 0:
                            self.game_over = True
                elif event.key == pygame.K_DOWN:
                    print('DOWN')
                    if self.cp[1] == 0:
                        self.x1_change = 0
                        self.y1_change = 10
                        self.cp = (self.x1_change,self.y1_change)
                        self.movesnake()
                        self.drawsnake()
                        self.played = True
                        for i in range(1,len(self.snakelst)):
                            if self.snakelst[0].p == self.snakelst[i].p:
                                self.game_over = True
                        if self.x1 >= self.board.get_width() or self.x1 < 0 or self.y1 >= self.board.get_height() or self.y1 < 0:
                            self.game_over = True

        if not self.played:
            self.movesnake()
        

        self.drawsnake()
        for i in range(1,len(snakelst)):
            if snakelst[0].p == snakelst[i].p:
                self.game_over = True
        if self.x1 >= self.board.get_width() or self.x1 < 0 or self.y1 >= self.board.get_height() or self.y1 < 0:
            self.game_over = True

        pygame.display.update()
        board = pygame.surfarray.pixels3d(self.board)
        clock.tick(15)
        


class snake:
    def __init__(self, p, color):
        self.p = p
        self.color = color

a = game()
pygame.quit()

quit()
